def edit_distance(str1: str, str2: str) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç **–†–µ–¥–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (Levenshtein Distance)**,
    —Ç–æ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π (–≤—Å—Ç–∞–≤–∫–∞, —É–¥–∞–ª–µ–Ω–∏–µ, –∑–∞–º–µ–Ω–∞) –¥–ª—è
    –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è `str1` –≤ `str2`.

    üîπ –ê–ª–≥–æ—Ä–∏—Ç–º (–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ O(m * n)):
    1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º `dp[i][j]`, –≥–¥–µ `dp[i][j]` ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
       –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è `str1[:i]` –≤ `str2[:j]`.
    2Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏:
        - `dp[i][0] = i` (—É–¥–∞–ª—è–µ–º `i` —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ `str1`).
        - `dp[0][j] = j` (–≤—Å—Ç–∞–≤–ª—è–µ–º `j` —Å–∏–º–≤–æ–ª–æ–≤ –≤ `str1`).
    3Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º `dp` –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:
        - –ï—Å–ª–∏ `str1[i-1] == str2[j-1]`, `dp[i][j] = dp[i-1][j-1]` (—Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç).
        - –ò–Ω–∞—á–µ `dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + 1)`,
          –≥–¥–µ:
            - `dp[i-1][j] + 1` ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ `str1`.
            - `dp[i][j-1] + 1` ‚Äî –≤—Å—Ç–∞–≤–∫–∞ –≤ `str1`.
            - `dp[i-1][j-1] + 1` ‚Äî –∑–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞.
    4Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: `dp[len(str1)][len(str2)]`.

    üîπ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(m * n)** ‚Äî –¥–≤–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–∞.
    üîπ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: **O(m * n)** ‚Äî `dp` —Ç–∞–±–ª–∏—Ü–∞.

    :param str1: str - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞.
    :param str2: str - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞.
    :return: int - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """

    m, n = len(str1), len(str2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
    for i in range(m + 1):
        dp[i][0] = i  # –£–¥–∞–ª—è–µ–º i —Å–∏–º–≤–æ–ª–æ–≤

    for j in range(n + 1):
        dp[0][j] = j  # –í—Å—Ç–∞–≤–ª—è–µ–º j —Å–∏–º–≤–æ–ª–æ–≤

    # 2. –ó–∞–ø–æ–ª–Ω—è–µ–º DP —Ç–∞–±–ª–∏—Ü—É
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:  # –°–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(
                    dp[i - 1][j] + 1,  # –£–¥–∞–ª–µ–Ω–∏–µ
                    dp[i][j - 1] + 1,  # –í—Å—Ç–∞–≤–∫–∞
                    dp[i - 1][j - 1] + 1  # –ó–∞–º–µ–Ω–∞
                )

    return dp[m][n]


# üîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º
s1 = "test"
s2 = "tset"
print(edit_distance(s1, s2))  # ‚úÖ 2

s1 = "kitten"
s2 = "sitting"
print(edit_distance(s1, s2))  # ‚úÖ 3

s1 = "flaw"
s2 = "lawn"
print(edit_distance(s1, s2))  # ‚úÖ 2

s1 = "abcdef"
s2 = "azced"
print(edit_distance(s1, s2))  # ‚úÖ 3
